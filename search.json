[{"path":"https://niklhart.github.io/kldest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 kldest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-10d.html","id":"distributions-and-analytical-kl-divergence","dir":"Articles","previous_headings":"Specification of benchmark scenario","what":"Distributions and analytical KL divergence","title":"Algorithm benchmark in high dimensions","text":"Simulation study design Analytical values Kullback-Leibler divergences test cases:","code":"D <- 10 Sigma <- constDiagMatrix(dim = D, diag = 1, offDiag = 0.999) p <- list(     gaussian_10d = list(         paramTrue   = list(mu = rep(0, D), sigma = Sigma),         paramApprox = list(mu = rep(1, D), sigma = Sigma)     ) ) distributions <- list(     gaussian_10d = list(         samples = function(n, m) {             X <- mvrnorm(n = n,                           mu = p$gaussian_10d$paramTrue$mu,                             Sigma = p$gaussian_10d$paramTrue$sigma)             Y <- mvrnorm(n = m,                           mu = p$gaussian_10d$paramApprox$mu,                           Sigma = p$gaussian_10d$paramApprox$sigma)             list(X = X, Y = Y)         },         q = function(x) mvdnorm(x, mu = p$gaussian_10d$paramApprox$mu,                                  Sigma = p$gaussian_10d$paramApprox$sigma),         kld = kld_gaussian(             mu1    = p$gaussian_10d$paramTrue$mu,             sigma1 = p$gaussian_10d$paramTrue$sigma,             mu2    = p$gaussian_10d$paramApprox$mu,             sigma2 = p$gaussian_10d$paramApprox$sigma)     ) ) vapply(distributions, function(x) x$kld, 1) #> gaussian_10d  #>    0.5004504"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-10d.html","id":"simulation-scenarios","dir":"Articles","previous_headings":"Specification of benchmark scenario","what":"Simulation scenarios","title":"Algorithm benchmark in high dimensions","text":"distributions specified , samples different sizes drawn, several replicates per distribution sample size.","code":"samplesize <- 10^(2:4) #n <- c(20,50,100,200,500,1000,2000,5000,10000) nRep       <- 25L  scenarios <- combinations(     distribution = names(distributions),     sample.size  = samplesize,     replicate    = 1:nRep )"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-10d.html","id":"algorithms","dir":"Articles","previous_headings":"Specification of benchmark scenario","what":"Algorithms","title":"Algorithm benchmark in high dimensions","text":"following algorithms considered:","code":"algorithms_XY <- list(     nn1_XY   = function(X, Y) kld_est_nn(X, Y),     nn_br_XY = function(X, Y) kld_est_brnn(X, Y, warn.max.k = FALSE) ) algorithms_Xq <- list(     nn1_Xq = function(X, q) kld_est_nn(X, q = q) ) nAlgoXY  <- length(algorithms_XY) nAlgoXq  <- length(algorithms_Xq) nmAlgo   <- c(names(algorithms_XY),names(algorithms_Xq))"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-10d.html","id":"run-the-simulation-study","dir":"Articles","previous_headings":"","what":"Run the simulation study","title":"Algorithm benchmark in high dimensions","text":"Post-processing: combine scenarios, kldiv runtime single data frame","code":"# allocating results matrices nscenario  <- nrow(scenarios) runtime <- kld <- matrix(nrow = nscenario,                           ncol = nAlgoXY+nAlgoXq,                           dimnames = list(NULL, nmAlgo))  for (i in 1:nscenario) {      dist <- scenarios$distribution[i]     n    <- scenarios$sample.size[i]          samples <- distributions[[dist]]$sample(n = n, m = n)     X <- samples$X     Y <- samples$Y     q <- distributions[[dist]]$q      # different algorithms are evaluated on the same samples     for (j in 1:nAlgoXY) {         algo         <- algorithms_XY[[j]]         start_time   <- Sys.time()         kld[i,j]     <- algo(X, Y)         end_time     <- Sys.time()         runtime[i,j] <- end_time - start_time     }     for (j in 1:nAlgoXq) {         nj            <- nAlgoXY+j         algo          <- algorithms_Xq[[j]]         start_time    <- Sys.time()         kld[i,nj]     <- algo(X, q)         end_time      <- Sys.time()         runtime[i,nj] <- end_time - start_time     } } tmp1 <- cbind(scenarios, kld) |> melt(measure.vars  = nmAlgo,                                       value.name    = \"kld\",                                       variable.name = \"algorithm\")  tmp2 <- cbind(scenarios, runtime) |> melt(measure.vars  = nmAlgo,                                           value.name    = \"runtime\",                                           variable.name = \"algorithm\")  results <- merge(tmp1,tmp2) results$sample.size <- as.factor(results$sample.size) rm(tmp1,tmp2)"},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-10d.html","id":"accuracy-of-kl-divergence-estimators","dir":"Articles","previous_headings":"Graphical display of results","what":"Accuracy of KL divergence estimators","title":"Algorithm benchmark in high dimensions","text":"\\(\\Rightarrow\\) bias-reduced nearest neighbour algorithm shows much better performance either plain 1-nearest neighbour algorithms. particular, even approximate density q known (e.g., model fitted data X), may preferable simulate (large) sample Y \\(Q\\) use bias-reduced algorithm two-sample problem, rather using q.","code":"ggplot(results, aes(x=sample.size, y=kld, color=algorithm)) +      geom_jitter(position=position_dodge(0.5)) +      facet_wrap(\"distribution\", scales = \"free_y\") +     geom_hline(data = data.frame(distribution = names(distributions),                                   kldtrue = vapply(distributions, function(x) x$kld,1)),                 aes(yintercept = kldtrue)) +     xlab(\"Sample sizes\") + ylab(\"KL divergence estimate\") +      ggtitle(\"Accuracy of different algorithms\") +     theme(plot.title = element_text(hjust = 0.5))"},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-1d.html","id":"distributions-and-analytical-kl-divergence","dir":"Articles","previous_headings":"Specification of benchmark scenario","what":"Distributions and analytical KL divergence","title":"Algorithm benchmark in 1D","text":"investigate following pairs distributions, analytical KL divergence values known: \\(\\text{Exp}(1)\\) vs. \\(\\text{Exp}(1/12)\\). \\(\\mathcal{N}(0,1)\\) vs. \\(\\mathcal{N}(1,2^2)\\), \\(\\mathcal{U}(1,2)\\) vs. \\(\\mathcal{U}(0,4)\\), Analytical values Kullback-Leibler divergences test cases:","code":"p <- list(     exponential = list(lambda1 = 1, lambda2 = 1/12),     gaussian    = list(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2),     uniform     = list(a1 = 1, b1 = 2, a2 = 0, b2 = 4) ) distributions <- list(     exponential = list(         samples = function(n, m) {             X <- rexp(n, rate = p$exponential$lambda1)             Y <- rexp(m, rate = p$exponential$lambda2)             list(X = X, Y = Y)         },         kld = do.call(kld_exponential, p$exponential)     ),     gaussian = list(         samples = function(n, m) {             X <- rnorm(n, mean = p$gaussian$mu1, sd = sqrt(p$gaussian$sigma1))             Y <- rnorm(m, mean = p$gaussian$mu2, sd = sqrt(p$gaussian$sigma2))             list(X = X, Y = Y)         },         kld = do.call(kld_gaussian, p$gaussian)     ),     uniform = list(          samples = function(n, m) {             X <- runif(n, min = p$uniform$a1, max = p$uniform$b1)             Y <- runif(m, min = p$uniform$a2, max = p$uniform$b2)             list(X = X, Y = Y)         },         kld = do.call(kld_uniform, p$uniform)     ) ) vapply(distributions, function(x) x$kld, 1) #> exponential    gaussian     uniform  #>   1.5682400   0.4431472   1.3862944"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-1d.html","id":"simulation-scenarios","dir":"Articles","previous_headings":"Specification of benchmark scenario","what":"Simulation scenarios","title":"Algorithm benchmark in 1D","text":"distributions specified , samples different sizes drawn, several replicates per distribution sample size.","code":"samplesize <- 10^(2:4) nRep       <- 25L  scenarios <- combinations(     distribution = names(distributions),     sample.size  = samplesize,     replicate    = 1:nRep )"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-1d.html","id":"algorithms","dir":"Articles","previous_headings":"Specification of benchmark scenario","what":"Algorithms","title":"Algorithm benchmark in 1D","text":"consder following algorithms: kernel density estimation numerical integration (dens_int) kernel density estimation Monte Carlo approximation (dens_mc) 1-nearest neighbour density estimation (nn_1) bias-reduced nearest neighbour density estimation (nn_br)","code":"algorithms <- list(     dens_int = function(X, Y) kld_est_kde1(X = X, Y = Y, MC = FALSE),     dens_mc  = function(X, Y) kld_est_kde1(X = X, Y = Y, MC = TRUE),     nn_1     = kld_est_nn,     nn_br = function(X, Y) kld_est_brnn(X = X, Y = Y, warn.max.k = FALSE) ) nAlgo   <- length(algorithms)"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-1d.html","id":"run-the-simulation-study","dir":"Articles","previous_headings":"","what":"Run the simulation study","title":"Algorithm benchmark in 1D","text":"Post-processing: combine scenarios, kldiv1d runtime single data frame","code":"# allocating results matrices nscenario  <- nrow(scenarios) runtime <- kldiv1d <- matrix(nrow = nscenario,                               ncol = nAlgo,                               dimnames = list(NULL, names(algorithms)))  for (i in 1:nscenario) {      dist <- scenarios$distribution[i]     n    <- scenarios$sample.size[i]          samples <- distributions[[dist]]$sample(n = n, m = n)     X <- samples$X     Y <- samples$Y          # different algorithms are evaluated on the same samples     for (j in 1:nAlgo) {         algo <- algorithms[[j]]         start_time <- Sys.time()         kldiv1d[i,j] <- algo(X, Y)         end_time <- Sys.time()         runtime[i,j] <- end_time - start_time     } } tmp1 <- cbind(scenarios, kldiv1d) |> melt(measure.vars = names(algorithms),                                           value.name = \"kld\",                                           variable.name = \"algorithm\")  tmp2 <- cbind(scenarios, runtime) |> melt(measure.vars = names(algorithms),                                           value.name = \"runtime\",                                           variable.name = \"algorithm\")  results <- merge(tmp1,tmp2) results$sample.size <- as.factor(results$sample.size) rm(tmp1,tmp2)"},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-1d.html","id":"accuracy-of-kl-divergence-estimators","dir":"Articles","previous_headings":"Results","what":"Accuracy of KL divergence estimators","title":"Algorithm benchmark in 1D","text":"\\(\\Rightarrow\\) estimators converge towards true KL divergence (black solid line). Kernel density-based estimators generally lower variance nearest neighbour-based estimators, show finite sample bias, especially asymmetric exponential distribution. difference 1-nearest neighbour bias-reduced k-nearest neighbour methods terms accuracy.","code":"ggplot(results, aes(x=sample.size, y=kld, color=algorithm)) +      geom_jitter(position=position_dodge(.5)) +      facet_wrap(\"distribution\", scales = \"free_y\") +     geom_hline(data = data.frame(distribution = names(distributions),                                   kldtrue = vapply(distributions, function(x) x$kld,1)),                 aes(yintercept = kldtrue)) +     xlab(\"Sample sizes\") + ylab(\"KL divergence estimate\") +      ggtitle(\"Accuracy of different algorithms\") +     theme(plot.title = element_text(hjust = 0.5)) #> Warning: Removed 10 rows containing missing values (`geom_point()`)."},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-1d.html","id":"runtime-of-kl-divergence-estimators","dir":"Articles","previous_headings":"Results","what":"Runtime of KL divergence estimators","title":"Algorithm benchmark in 1D","text":"\\(\\Rightarrow\\) Kernel density-based estimators, use stats::density, generally fastest (except small sample sizes). investigated methods scale approximately linearly sample size, due use fast Fourier transform kernel density estimation use kd-tree nearest neighbours search. bias-reduced nearest neighbour estimator nn_br approximately 1 order magnitude slower 1-nearest neighbour estimator nn_1, without offering additional accuracy 1-D examples. extra effort starts pay higher-dimensional problems.","code":"ggplot(results, aes(x=sample.size, y=runtime, color=algorithm)) +      scale_y_log10() +      geom_jitter(position=position_dodge(.5)) +      facet_wrap(\"distribution\", scales = \"free_y\") +     xlab(\"Sample sizes\") + ylab(\"Runtime [sec]\") +      ggtitle(\"Runtime of different algorithms\") +     theme(plot.title = element_text(hjust = 0.5))"},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-2d.html","id":"distributions-and-kl-d","dir":"Articles","previous_headings":"Specification of simulation scenario","what":"Distributions and KL-D","title":"Algorithm benchmark in 2D","text":"investigate following pairs distributions, analytical KL divergence values known: \\(\\mathcal{N}\\left(\\begin{pmatrix}0\\\\ 0\\end{pmatrix},\\begin{pmatrix}1 & 0\\\\ 0 & 1\\end{pmatrix}\\right)\\) vs. \\(\\mathcal{N}\\left(\\begin{pmatrix}1\\\\ 1\\end{pmatrix},\\begin{pmatrix}2 & 0\\\\ 0 & 2\\end{pmatrix}\\right)\\) (2D Gaussians, different location/scale, uncorrelated), \\(\\mathcal{N}\\left(\\begin{pmatrix}0\\\\ 0\\end{pmatrix},\\begin{pmatrix}1 & 0.9\\\\ 0.9 & 1\\end{pmatrix}\\right)\\) vs. \\(\\mathcal{N}\\left(\\begin{pmatrix}0\\\\ 0\\end{pmatrix},\\begin{pmatrix}1 & 0.1\\\\ 0.1 & 1\\end{pmatrix}\\right)\\) (2D Gaussians, location/scale, different correlation strength). Analytical values Kullback-Leibler divergences test cases:","code":"p <- list(     indep    = list(mu1 = c(0,0), sigma1 = diag(2),                      mu2 = c(1,1), sigma2 = 2*diag(2)),     corr     = list(mu1 = c(0,0), sigma1 = constDiagMatrix(dim = 2, diag = 1, offDiag = 0.9),                      mu2 = c(0,0), sigma2 = constDiagMatrix(dim = 2, diag = 1, offDiag = 0.1)) ) distributions <- list(     indep = list(         samples = function(n, m) {             X <- MASS::mvrnorm(n = n, mu = p$indep$mu1, Sigma = p$indep$sigma1)             Y <- MASS::mvrnorm(n = m, mu = p$indep$mu2, Sigma = p$indep$sigma2)             list(X = X, Y = Y)         },         kld = do.call(kld_gaussian, p$indep)     ),     corr = list(         samples = function(n, m) {             X <- MASS::mvrnorm(n = n, mu = p$corr$mu1, Sigma = p$corr$sigma1)             Y <- MASS::mvrnorm(n = m, mu = p$corr$mu2, Sigma = p$corr$sigma2)             list(X = X, Y = Y)         },         kld = do.call(kld_gaussian, p$corr)     ) ) kldtrue <- data.frame(distribution = factor(names(distributions),                                              levels = names(distributions),                                             ordered = TRUE),                        kld          = unname(vapply(distributions, function(x) x$kld,1))) kldtrue #>   distribution       kld #> 1        indep 0.6931472 #> 2         corr 0.7445324"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-2d.html","id":"simulation-scenarios","dir":"Articles","previous_headings":"Specification of simulation scenario","what":"Simulation scenarios","title":"Algorithm benchmark in 2D","text":"distributions specified , samples different sizes drawn, several replicates per distribution sample size.","code":"samplesize <- 10^(2:5) nRep       <- 25L  scenarios <- combinations(     distribution = names(distributions),     sample.size  = samplesize,     replicate    = 1:nRep )"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-2d.html","id":"algorithms","dir":"Articles","previous_headings":"Specification of simulation scenario","what":"Algorithms","title":"Algorithm benchmark in 2D","text":"following algorithms considered:","code":"algorithms <- list(     kde2  = function(X, Y) kld_est_kde2(X = X, Y = Y),     nn_1  = kld_est_nn,     nn_br = function(X, Y) kld_est_brnn(X = X, Y = Y, warn.max.k = FALSE) ) nAlgo   <- length(algorithms)"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-2d.html","id":"run-the-simulation-study","dir":"Articles","previous_headings":"","what":"Run the simulation study","title":"Algorithm benchmark in 2D","text":"Post-processing: combine scenarios, kld runtime single data frame Convert factor","code":"# allocating results matrices nscenario  <- nrow(scenarios) runtime <- kld <- matrix(nrow = nscenario,                           ncol = nAlgo,                           dimnames = list(NULL, names(algorithms)))  for (i in 1:nscenario) {      dist <- scenarios$distribution[i]     n    <- scenarios$sample.size[i]          samples <- distributions[[dist]]$sample(n = n, m = n)     X <- samples$X     Y <- samples$Y          # different algorithms are evaluated on the same samples     for (j in 1:nAlgo) {         algo <- algorithms[[j]]         start_time <- Sys.time()         kld[i,j] <- algo(X, Y)         end_time <- Sys.time()         runtime[i,j] <- end_time - start_time     } } tmp1 <- cbind(scenarios, kld) |> melt(measure.vars = names(algorithms),                                       value.name = \"kld\",                                       variable.name = \"algorithm\")  tmp2 <- cbind(scenarios, runtime) |> melt(measure.vars = names(algorithms),                                           value.name = \"runtime\",                                           variable.name = \"algorithm\")  results <- merge(tmp1,tmp2) rm(tmp1,tmp2) results$sample.size <- as.factor(results$sample.size) results$algorithm <- factor(results$algorithm,                              levels = names(algorithms)) results$distribution <- factor(results$distribution,                                 levels = names(distributions),                                 ordered = TRUE)"},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-2d.html","id":"accuracy-of-kl-divergence-estimators","dir":"Articles","previous_headings":"Results","what":"Accuracy of KL divergence estimators","title":"Algorithm benchmark in 2D","text":"\\(\\Rightarrow\\) estimators converge towards true KL divergence (black solid line). Whereas nearest neighbour-based estimators unbiased, kernel density-based estimator comparable variance considerable bias smaller samples.","code":"ggplot(results, aes(x=sample.size, y=kld, color=algorithm)) +      geom_jitter(position=position_dodge(.5)) +      facet_wrap(\"distribution\", scales = \"free_y\") +     geom_hline(data = kldtrue, aes(yintercept = kld)) +     xlab(\"Sample sizes\") + ylab(\"KL divergence estimate\") +      ggtitle(\"Accuracy of different algorithms\") +     theme(plot.title = element_text(hjust = 0.5))"},{"path":"https://niklhart.github.io/kldest/articles/algorithm-benchmark-2d.html","id":"runtime-of-kl-divergence-estimators","dir":"Articles","previous_headings":"Results","what":"Runtime of KL divergence estimators","title":"Algorithm benchmark in 2D","text":"\\(\\Rightarrow\\) kernel density-based estimator, use KernSmooth::bkde, 10-fold faster nearest neighbour-based estimators large samples. However also much less precise.","code":"ggplot(results, aes(x=sample.size, y=runtime, color=algorithm)) +      scale_y_log10() +      geom_jitter(position=position_dodge(.5)) +      facet_wrap(\"distribution\", scales = \"free_y\") +     xlab(\"Sample sizes\") + ylab(\"Runtime [sec]\") +      ggtitle(\"Runtime of different algorithms\") +     theme(plot.title = element_text(hjust = 0.5))"},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/comparison-1sample-2sample-1D.html","id":"distributions-and-analytical-kl-d","dir":"Articles","previous_headings":"Specification of simulation scenario","what":"Distributions and analytical KL-D","title":"Comparing 1- vs. 2-sample estimation in 1-D","text":"investigate following pairs distributions, analytical KL divergence values known: \\(\\text{Exp}(1)\\) vs. \\(\\text{Exp}(1/12)\\), \\(\\mathcal{N}(0,1)\\) vs. \\(\\mathcal{N}(1,2^2)\\), \\(\\mathcal{U}(1,2)\\) vs. \\(\\mathcal{U}(0,4)\\). Analytical values Kullback-Leibler divergences test cases:","code":"p <- list(     exponential = list(lambda1 = 1, lambda2 = 1/12),     gaussian    = list(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2),     uniform     = list(a1 = 1, b1 = 2, a2 = 0, b2 = 4) ) distributions <- list(     exponential = list(         samples = function(n, m) {             X <- rexp(n, rate = p$exponential$lambda1)             Y <- rexp(m, rate = p$exponential$lambda2)             list(X = X, Y = Y)         },         q = function(x) dexp(x, rate = p$exponential$lambda2),         kld = do.call(kld_exponential, p$exponential)     ),     gaussian = list(         samples = function(n, m) {             X <- rnorm(n, mean = p$gaussian$mu1, sd = sqrt(p$gaussian$sigma1))             Y <- rnorm(m, mean = p$gaussian$mu2, sd = sqrt(p$gaussian$sigma2))             list(X = X, Y = Y)         },         q = function(x) dnorm(x, mean = p$gaussian$mu2, sd = sqrt(p$gaussian$sigma2)),         kld = do.call(kld_gaussian, p$gaussian)     ),     uniform = list(          samples = function(n, m) {             X <- runif(n, min = p$uniform$a1, max = p$uniform$b1)             Y <- runif(m, min = p$uniform$a2, max = p$uniform$b2)             list(X = X, Y = Y)         },         q = function(x) dunif(x, min = p$uniform$a2, max = p$uniform$b2),         kld = do.call(kld_uniform, p$uniform)     ) ) vapply(distributions, function(x) x$kld, 1) #> exponential    gaussian     uniform  #>   1.5682400   0.4431472   1.3862944"},{"path":"https://niklhart.github.io/kldest/articles/comparison-1sample-2sample-1D.html","id":"simulation-scenarios","dir":"Articles","previous_headings":"Specification of simulation scenario","what":"Simulation scenarios","title":"Comparing 1- vs. 2-sample estimation in 1-D","text":"distributions specified , samples different sizes drawn, several replicates per distribution sample size.","code":"samplesize <- 10^(2:4) nRep       <- 25L  scenarios <- combinations(     distribution = names(distributions),     sample.size  = samplesize,     replicate    = 1:nRep )"},{"path":"https://niklhart.github.io/kldest/articles/comparison-1sample-2sample-1D.html","id":"algorithms","dir":"Articles","previous_headings":"Specification of simulation scenario","what":"Algorithms","title":"Comparing 1- vs. 2-sample estimation in 1-D","text":"following algorithms considered:","code":"algorithms_XY <- list(     nn_XY     = function(X, Y) kld_est_nn(X, Y) ) algorithms_Xq <- list(     nn_Xq = function(X, q) kld_est_nn(X, q = q) ) nAlgoXY  <- length(algorithms_XY) nAlgoXq  <- length(algorithms_Xq) nmAlgo   <- c(names(algorithms_XY),names(algorithms_Xq))"},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/comparison-1sample-2sample-1D.html","id":"simulation","dir":"Articles","previous_headings":"Comparison","what":"Simulation","title":"Comparing 1- vs. 2-sample estimation in 1-D","text":"Post-processing: combine scenarios, kld runtime single data frame","code":"# allocating results matrices nscenario  <- nrow(scenarios) runtime <- kld <- matrix(nrow = nscenario,                           ncol = nAlgoXY+nAlgoXq,                           dimnames = list(NULL, nmAlgo))  for (i in 1:nscenario) {      dist <- scenarios$distribution[i]     n    <- scenarios$sample.size[i]          samples <- distributions[[dist]]$sample(n = n, m = n)     X <- samples$X     Y <- samples$Y     q <- distributions[[dist]]$q      # different algorithms are evaluated on the same samples     for (j in 1:nAlgoXY) {         algo         <- algorithms_XY[[j]]         start_time   <- Sys.time()         kld[i,j]     <- algo(X, Y)         end_time     <- Sys.time()         runtime[i,j] <- end_time - start_time     }     for (j in 1:nAlgoXq) {         nj            <- nAlgoXY+j         algo          <- algorithms_Xq[[j]]         start_time    <- Sys.time()         kld[i,nj]     <- algo(X, q)         end_time      <- Sys.time()         runtime[i,nj] <- end_time - start_time     } } tmp1 <- cbind(scenarios, kld) |> melt(measure.vars = nmAlgo,                                       value.name = \"kld\",                                       variable.name = \"algorithm\")  tmp2 <- cbind(scenarios, runtime) |> melt(measure.vars = nmAlgo,                                           value.name = \"runtime\",                                           variable.name = \"algorithm\")  results <- merge(tmp1,tmp2) results$sample.size <- as.factor(results$sample.size) rm(tmp1,tmp2)"},{"path":"https://niklhart.github.io/kldest/articles/comparison-1sample-2sample-1D.html","id":"results-accuracy-of-kl-divergence-estimators","dir":"Articles","previous_headings":"Comparison","what":"Results: Accuracy of KL divergence estimators","title":"Comparing 1- vs. 2-sample estimation in 1-D","text":"\\(\\Rightarrow\\) 1-sample estimation accurate 2-sample estimation three 1-D test cases sample sizes, expected since information available 1-sample case. However, notice bias reduction kld_est_brnn possible 1-sample estimation. Hence, high-dimensional cases density approximate distribution \\(Q\\) available, may preferable simulate (large) sample \\(Q\\) use bias reduction two-sample problem, rather using kld_est_nn 1-sample variant.","code":"ggplot(results, aes(x=sample.size, y=kld, color=algorithm)) +      geom_jitter(position=position_dodge(.5)) +      facet_wrap(\"distribution\", scales = \"free_y\") +     geom_hline(data = data.frame(distribution = names(distributions),                                   kldtrue = vapply(distributions, function(x) x$kld,1)),                 aes(yintercept = kldtrue)) +     xlab(\"Sample sizes\") + ylab(\"KL divergence estimate\") +      ggtitle(\"Accuracy of different algorithms\") +     theme(plot.title = element_text(hjust = 0.5))"},{"path":"https://niklhart.github.io/kldest/articles/uncertainty-quantification.html","id":"simulation-scenarios","dir":"Articles","previous_headings":"","what":"Simulation scenarios","title":"Confidence intervals for KL divergence","text":"distributions specified , samples different sizes drawn, several replicates per distribution sample size.","code":"samplesize <- c(10,100,1000,10000) nRep       <- 100L  scenarios <- combinations(     distribution = names(distributions),     sample.size  = samplesize,     replicate    = 1:nRep )"},{"path":"https://niklhart.github.io/kldest/articles/uncertainty-quantification.html","id":"algorithm-bootstrap-methods","dir":"Articles","previous_headings":"","what":"Algorithm & bootstrap methods","title":"Confidence intervals for KL divergence","text":"following estimator considered: use following subsampling variants:","code":"estimator <- kld_est_nn resampling <- list(     sub_n12 = function(...) kld_ci_subsampling(..., subsample.size = function(n) n^(1/2)),      sub_n23 = function(...) kld_ci_subsampling(..., subsample.size = function(n) n^(2/3)),      sub_n12se = function(...) kld_ci_subsampling(..., subsample.size = function(n) n^(1/2), method = \"se\"),     sub_n23se = function(...) kld_ci_subsampling(..., subsample.size = function(n) n^(2/3), method = \"se\") ) nResamp <- length(resampling)"},{"path":[]},{"path":"https://niklhart.github.io/kldest/articles/uncertainty-quantification.html","id":"calculation-of-empirical-coverage","dir":"Articles","previous_headings":"Uncertainty quantification of estimators","what":"Calculation of empirical coverage","title":"Confidence intervals for KL divergence","text":"Combine scenarios CI coverage information: Compute coverage per sample size / algorithm / distribution:","code":"# allocating results matrices nscenario  <- nrow(scenarios) covered <- matrix(nrow = nscenario,                    ncol = nResamp,                    dimnames = list(NULL, names(resampling)))  # looping over scenarios for (i in 1:nscenario) {      dist <- scenarios$distribution[i]     n    <- scenarios$sample.size[i]          samples <- distributions[[dist]]$sample(n = n, m = n)     kld     <- distributions[[dist]]$kld          X <- samples$X     Y <- samples$Y          # different algorithms are evaluated on the same samples     for (j in 1:nResamp) {         kldboot <- resampling[[j]](X, Y, estimator = estimator, B = 500L)         covered[i,j] <- kldboot$ci[1] <= kld && kld <= kldboot$ci[2]     } } results <- cbind(scenarios, covered) |> melt(measure.vars  = names(resampling),                                              value.name    = \"covered\",                                              variable.name = \"resampling\") coverage <- dcast(results,                    sample.size + resampling + distribution ~ .,                    value.var = \"covered\",                    fun.aggregate = function(x) mean(x, na.rm = TRUE)) names(coverage)[4] <- \"coverage\""},{"path":"https://niklhart.github.io/kldest/articles/uncertainty-quantification.html","id":"results-coverage-of-confidence-intervals-for-kl-divergence","dir":"Articles","previous_headings":"Uncertainty quantification of estimators","what":"Results: coverage of confidence intervals for KL divergence","title":"Confidence intervals for KL divergence","text":"\\(\\Rightarrow\\) coverage confidence intervals based nearest neighbour density estimation approaches nominal coverage 95% increasing sample sizes. Gaussian case, kernel density based method performs well estimation benchmark, also holds kernel density method. However, due bias estimating KL divergence exponential uniform distributions, uncertainty quantification also fails. using bootstrapping instead subsampling, results similar kernel density estimation, change dramatically nearest neighbour density estimation, deal ties produced resampling replacement.","code":"ggplot(coverage, aes(x = sample.size, y = coverage, color = resampling)) +      facet_wrap(\"distribution\") +     geom_line() +      scale_x_log10() +     geom_hline(yintercept = 0.95, lty = 2) +      scale_color_discrete(name = \"CI method\",                          labels = c(\"Reverse percentile, s = n^(1/2)\",                                    \"Reverse percentile, s = n^(2/3)\",                                    \"1.96 standard error, s = n^(1/2)\",                                    \"1.96 standard error, s = n^(2/3)\")) +     ggtitle(\"Subsampling-based confidence intervals\") +     theme(plot.title = element_text(hjust = 0.5))"},{"path":"https://niklhart.github.io/kldest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Niklas Hartung. Author, maintainer, copyright holder.","code":""},{"path":"https://niklhart.github.io/kldest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hartung N (2024). kldest: Sample-based estimation Kullback-Leibler divergence. R package version 0.1.0.9002, https://niklhart.github.io/kldest/.","code":"@Manual{,   title = {kldest: Sample-based estimation of Kullback-Leibler divergence},   author = {Niklas Hartung},   year = {2024},   note = {R package version 0.1.0.9002},   url = {https://niklhart.github.io/kldest/}, }"},{"path":"https://niklhart.github.io/kldest/index.html","id":"kldest-kullback-leibler-divergence-estimation","dir":"","previous_headings":"","what":"Sample-based estimation of Kullback-Leibler divergence","title":"Sample-based estimation of Kullback-Leibler divergence","text":"goal kldest estimate Kullback-Leibler (KL) divergence DKL(P||Q) two probability distributions P Q based : sample x1, ..., xn P probability density q Q, samples x1, ..., xn P y1, ..., ym Q. distributions P Q may uni- multivariate, may discrete, continuous mixed discrete/continuous. Different estimation algorithms provided continuous distributions, either based nearest neighbour density estimation kernel density estimation. Confidence intervals KL divergence can also computed, either via subsampling (preferred) bootstrapping.","code":""},{"path":"https://niklhart.github.io/kldest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Sample-based estimation of Kullback-Leibler divergence","text":"can install development version kldest GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"niklhart/kldest\")"},{"path":"https://niklhart.github.io/kldest/index.html","id":"a-minimal-example-for-kl-divergence-estimation","dir":"","previous_headings":"","what":"A minimal example for KL divergence estimation","title":"Sample-based estimation of Kullback-Leibler divergence","text":"KL divergence estimation based nearest neighbour density estimates flexible approach.","code":"library(kldest)"},{"path":"https://niklhart.github.io/kldest/index.html","id":"kl-divergence-between-1-d-gaussians","dir":"","previous_headings":"A minimal example for KL divergence estimation","what":"KL divergence between 1-D Gaussians","title":"Sample-based estimation of Kullback-Leibler divergence","text":"Analytical KL divergence: Estimate based two samples Gaussians: Estimate based sample first Gaussian density second: Uncertainty quantification via subsampling:","code":"kld_gaussian(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2) #> [1] 0.4431472 X <- rnorm(100) Y <- rnorm(100, mean = 1, sd = 2) kld_est_nn(X, Y) #> [1] 0.630473 q <- function(x) dnorm(x, mean = 1, sd =2) kld_est_nn(X, q = q) #> [1] 0.3904603 kld_ci_subsampling(X, q = q)$ci #>       2.5%      97.5%  #> 0.06544115 0.65278508"},{"path":"https://niklhart.github.io/kldest/index.html","id":"kl-divergence-between-2-d-gaussians","dir":"","previous_headings":"A minimal example for KL divergence estimation","what":"KL divergence between 2-D Gaussians","title":"Sample-based estimation of Kullback-Leibler divergence","text":"Analytical KL divergence uncorrelated correlated Gaussian: Estimate based two samples Gaussians:","code":"kld_gaussian(mu1 = rep(0,2), sigma1 = diag(2),              mu2 = rep(0,2), sigma2 = matrix(c(1,1,1,2),nrow=2)) #> [1] 0.5 X1 <- rnorm(100) X2 <- rnorm(100) Y1 <- rnorm(100) Y2 <- Y1 + rnorm(100) X <- cbind(X1,X2) Y <- cbind(Y1,Y2)  kld_est_nn(X, Y) #> [1] 0.2497069"},{"path":"https://niklhart.github.io/kldest/reference/combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Combinations of input arguments — combinations","title":"Combinations of input arguments — combinations","text":"Combinations input arguments","code":""},{"path":"https://niklhart.github.io/kldest/reference/combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combinations of input arguments — combinations","text":"","code":"combinations(...)"},{"path":"https://niklhart.github.io/kldest/reference/combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combinations of input arguments — combinations","text":"... number atomic vectors.","code":""},{"path":"https://niklhart.github.io/kldest/reference/combinations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combinations of input arguments — combinations","text":"data frame columns named inputs, containing input combinations.","code":""},{"path":"https://niklhart.github.io/kldest/reference/combinations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combinations of input arguments — combinations","text":"","code":"combinations(a = 1:2, b = letters[1:3], c = LETTERS[1:2]) #>    a b c #> 1  1 a A #> 2  2 a A #> 3  1 b A #> 4  2 b A #> 5  1 c A #> 6  2 c A #> 7  1 a B #> 8  2 a B #> 9  1 b B #> 10 2 b B #> 11 1 c B #> 12 2 c B"},{"path":"https://niklhart.github.io/kldest/reference/constDiagMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Constant plus diagonal matrix — constDiagMatrix","title":"Constant plus diagonal matrix — constDiagMatrix","text":"Specify matrix constant values diagonal -diagonals. matrices can used vary degree dependency covariate matrices, example evaluating accuracy KL-divergence estimation algorithms.","code":""},{"path":"https://niklhart.github.io/kldest/reference/constDiagMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constant plus diagonal matrix — constDiagMatrix","text":"","code":"constDiagMatrix(dim = 1, diag = 1, offDiag = 0)"},{"path":"https://niklhart.github.io/kldest/reference/constDiagMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constant plus diagonal matrix — constDiagMatrix","text":"dim Dimension diag Value diagonal offDiag Value -diagonals","code":""},{"path":"https://niklhart.github.io/kldest/reference/constDiagMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constant plus diagonal matrix — constDiagMatrix","text":"dim--dim matrix","code":""},{"path":"https://niklhart.github.io/kldest/reference/constDiagMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constant plus diagonal matrix — constDiagMatrix","text":"","code":"constDiagMatrix(dim = 3, diag = 1, offDiag = 0.9) #>      [,1] [,2] [,3] #> [1,]  1.0  0.9  0.9 #> [2,]  0.9  1.0  0.9 #> [3,]  0.9  0.9  1.0"},{"path":"https://niklhart.github.io/kldest/reference/is_two_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect if a one- or two-sample problem is specified — is_two_sample","title":"Detect if a one- or two-sample problem is specified — is_two_sample","text":"Detect one- two-sample problem specified","code":""},{"path":"https://niklhart.github.io/kldest/reference/is_two_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect if a one- or two-sample problem is specified — is_two_sample","text":"","code":"is_two_sample(Y, q)"},{"path":"https://niklhart.github.io/kldest/reference/is_two_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect if a one- or two-sample problem is specified — is_two_sample","text":"Y vector, matrix, data frame NULL q function NULL.","code":""},{"path":"https://niklhart.github.io/kldest/reference/is_two_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect if a one- or two-sample problem is specified — is_two_sample","text":"TRUE two-sample problem (.e., Y non-null q = NULL) FALSE one-sample problem (.e., Y = NULL q non-null).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertainty of KL divergence estimate using Efron's bootstrap. — kld_ci_bootstrap","title":"Uncertainty of KL divergence estimate using Efron's bootstrap. — kld_ci_bootstrap","text":"function computes confidence interval KL divergence based Efron's bootstrap. approach works kernel density-based estimators since nearest neighbour-based estimators deal ties produced sampling replacement.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertainty of KL divergence estimate using Efron's bootstrap. — kld_ci_bootstrap","text":"","code":"kld_ci_bootstrap(   X,   Y,   estimator = kld_est_kde1,   B = 500L,   alpha = 0.05,   method = c(\"quantile\", \"se\"),   ... )"},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertainty of KL divergence estimate using Efron's bootstrap. — kld_ci_bootstrap","text":"X, Y n--d m--d matrices, representing n samples true distribution \\(P\\) m samples approximate distribution \\(Q\\), d dimensions. Vector input treated column matrix. estimator function expecting two inputs X Y, Kullback-Leibler divergence estimation method. Defaults kld_est_kde1, can deal one-dimensional two-sample problems (.e., d = 1 q = NULL). B Number bootstrap replicates (default: 500), larger, accurate, also computationally expensive. alpha Error level, defaults 0.05. method Either \"quantile\" (default), also known reverse percentile method, \"se\" normal approximation KL divergence estimator using standard error subsamples. ... Arguments passed estimator, .e. estimator(X, Y, ...).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncertainty of KL divergence estimate using Efron's bootstrap. — kld_ci_bootstrap","text":"list fields \"est\" (estimated KL divergence), \"boot\" (length B numeric vector KL divergence estimates bootstrap samples), \"ci\" (length 2 vector containing lower upper limits estimated confidence interval).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_bootstrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uncertainty of KL divergence estimate using Efron's bootstrap. — kld_ci_bootstrap","text":"Reference: Efron, \"Bootstrap Methods: Another Look Jackknife\", Annals Statistics, Vol. 7, . 1 (1979).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertainty of KL divergence estimate using Efron's bootstrap. — kld_ci_bootstrap","text":"","code":"# 1D Gaussian, two samples set.seed(0) X <- rnorm(100) Y <- rnorm(100, mean = 1, sd = 2) kld_gaussian(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2) #> [1] 0.4431472 kld_est_kde1(X, Y) #> [1] 0.3777243 kld_ci_bootstrap(X, Y) #> $est #> [1] 0.3777243 #>  #> $boot #>   [1] 0.4900997 0.4288852 0.3415948 0.3929740 0.3306462 0.4672130 0.3619696 #>   [8] 0.4447411 0.2281968 0.5100669 0.4440530 0.5151413 0.2403215 0.3034254 #>  [15] 0.3151712 0.4347812 0.4074126 0.4772365 0.3002506 0.4649479 0.5089515 #>  [22] 0.4455614 0.3470403 0.3663782 0.2787426 0.3668778 0.3742860 0.3125034 #>  [29] 0.4542192 0.4103037 0.2766077 0.5573032 0.2608188 0.3430964 0.4849936 #>  [36] 0.5298810 0.2798513 0.3586423 0.3802955 0.4737137 0.4444147 0.4691696 #>  [43] 0.4581918 0.4570390 0.3938396 0.3113365 0.3254752 0.4290392 0.3681640 #>  [50] 0.4466796 0.3166312 0.4084374 0.4996833 0.3843466 0.3879015 0.4920157 #>  [57] 0.4971181 0.3870000 0.6087053 0.4604436 0.4672886 0.4935871 0.4552187 #>  [64] 0.4343326 0.3017287 0.4409991 0.4191257 0.2917521 0.3571658 0.5245704 #>  [71] 0.2443092 0.4039694 0.4284452 0.5627052 0.3769635 0.3462769 0.7322846 #>  [78] 0.3772225 0.4371276 0.3905763 0.4479945 0.3736761 0.4332893 0.3802125 #>  [85] 0.2748007 0.4805638 0.5360162 0.3963138 0.4093129 0.5178257 0.4035712 #>  [92] 0.3603781 0.3563001 0.4353570 0.4733966 0.4695745 0.4133706 0.4746023 #>  [99] 0.4008397 0.2890319 0.3999485 0.3966168 0.3408188 0.4723591 0.4940797 #> [106] 0.4367256 0.2209134 0.3104857 0.3609537 0.5604788 0.4281396 0.5133508 #> [113] 0.4884516 0.3444690 0.4157688 0.5374020 0.3100017 0.4377075 0.2940775 #> [120] 0.4117515 0.5112649 0.5035838 0.4417300 0.3541222 0.3989550 0.3256545 #> [127] 0.3688343 0.4420134 0.3723223 0.4783505 0.5694866 0.3797833 0.3775875 #> [134] 0.5100747 0.3111923 0.3512092 0.4656115 0.4289437 0.5742040 0.5436953 #> [141] 0.3253434 0.3344178 0.3149975 0.4191616 0.3481922 0.4663446 0.4736615 #> [148] 0.2369792 0.3393322 0.2725534 0.4136408 0.2955463 0.3335103 0.3511803 #> [155] 0.4717224 0.3680746 0.2775067 0.3302067 0.4659219 0.4428608 0.4176416 #> [162] 0.3455954 0.3816613 0.3804219 0.3996586 0.3942996 0.3950583 0.5475492 #> [169] 0.4248065 0.5543430 0.3173249 0.4231724 0.3838473 0.4434135 0.4461944 #> [176] 0.2603398 0.5700035 0.3993587 0.3274955 0.3759073 0.3680786 0.4207400 #> [183] 0.4701632 0.3220973 0.3158963 0.3982309 0.3326085 0.3456427 0.4357406 #> [190] 0.4219209 0.3147053 0.3026815 0.3224640 0.4439950 0.3129376 0.4088296 #> [197] 0.3727266 0.3693731 0.4288432 0.3403812 0.2613384 0.3323892 0.4794724 #> [204] 0.4634505 0.3502484 0.3923499 0.2826802 0.2978827 0.4772096 0.5808436 #> [211] 0.4770980 0.3646285 0.4340251 0.5292136 0.3805728 0.3362618 0.3050005 #> [218] 0.4545115 0.3931226 0.3653126 0.4626796 0.3575381 0.3578032 0.4930583 #> [225] 0.3389581 0.5938617 0.4371515 0.3031194 0.4542201 0.2873379 0.3252889 #> [232] 0.4268834 0.4080898 0.3275265 0.3725423 0.4055945 0.4062494 0.5014863 #> [239] 0.2304942 0.2574627 0.3296221 0.3177980 0.3633753 0.5676019 0.5235684 #> [246] 0.3005237 0.3875966 0.5007937 0.3148960 0.3915391 0.4784026 0.6213710 #> [253] 0.3599361 0.5350134 0.4488446 0.5251598 0.4042814 0.3537144 0.4408784 #> [260] 0.2145308 0.3481511 0.4499438 0.2938613 0.4498800 0.4304006 0.3820603 #> [267] 0.2972665 0.4902451 0.6477508 0.3994243 0.4419885 0.3179771 0.5087676 #> [274] 0.3679937 0.3609388 0.5555911 0.3346342 0.5080699 0.3796655 0.4816511 #> [281] 0.5585243 0.4230868 0.3614294 0.6551786 0.5755585 0.4783139 0.3958333 #> [288] 0.4167528 0.2325508 0.5563992 0.2643631 0.4203993 0.3953428 0.4155240 #> [295] 0.3557176 0.5678653 0.5231653 0.5677050 0.4156751 0.4888881 0.3232134 #> [302] 0.4088122 0.3987023 0.3584168 0.5618109 0.2048823 0.5082463 0.3620446 #> [309] 0.4619374 0.4964694 0.3861967 0.4334390 0.4829870 0.4397545 0.5697330 #> [316] 0.4331187 0.4679969 0.4694689 0.4778542 0.3554752 0.5339315 0.3636690 #> [323] 0.4815018 0.3055901 0.2678634 0.4084891 0.5047926 0.2736882 0.2858729 #> [330] 0.3512593 0.4074675 0.2257344 0.5261578 0.2620817 0.4790350 0.3571194 #> [337] 0.3564991 0.3212567 0.2849296 0.2358110 0.3164334 0.3466473 0.3452344 #> [344] 0.3827078 0.4227957 0.4329205 0.5468875 0.4869288 0.4662288 0.2742882 #> [351] 0.3534309 0.6523193 0.4222715 0.4063296 0.3449913 0.3545158 0.4444795 #> [358] 0.4426225 0.4200984 0.5406491 0.3474062 0.4074542 0.4363344 0.3721478 #> [365] 0.4432067 0.4050441 0.4259648 0.3492640 0.2238766 0.3750970 0.4510611 #> [372] 0.4596679 0.3626532 0.1965485 0.4823300 0.5395141 0.3976717 0.4368833 #> [379] 0.5670300 0.5427169 0.3793830 0.4685303 0.2327124 0.5749666 0.5688098 #> [386] 0.3142150 0.3847925 0.4036562 0.2847816 0.4825468 0.3375600 0.4486472 #> [393] 0.3339418 0.4290669 0.3628435 0.7879205 0.3129927 0.3956102 0.5101002 #> [400] 0.3272177 0.5481218 0.4489110 0.4066136 0.3565226 0.4646725 0.5271234 #> [407] 0.4131415 0.3866107 0.4504967 0.3626434 0.5006048 0.4036060 0.5613037 #> [414] 0.3369034 0.3970831 0.3401706 0.3674479 0.3239791 0.6114419 0.3634631 #> [421] 0.3692334 0.2541242 0.4135399 0.2982988 0.3710185 0.5265742 0.5167748 #> [428] 0.3964489 0.4433636 0.5128181 0.4421873 0.4199792 0.3645934 0.3104514 #> [435] 0.4209801 0.4678135 0.5341203 0.4288440 0.4316728 0.5012717 0.4850217 #> [442] 0.3628922 0.3233696 0.3787990 0.5026406 0.4014776 0.4886639 0.4407414 #> [449] 0.3493982 0.4191644 0.2836097 0.4683608 0.3557869 0.4494037 0.3700913 #> [456] 0.5033954 0.4167857 0.3237581 0.3272712 0.3685542 0.4109166 0.4249095 #> [463] 0.4149881 0.4745920 0.3711364 0.2813392 0.4191832 0.3890111 0.4664940 #> [470] 0.5943942 0.3952220 0.4201568 0.4283223 0.2932045 0.5002033 0.3182895 #> [477] 0.4100501 0.4132519 0.4098158 0.3678759 0.4618132 0.4752966 0.4009683 #> [484] 0.3781364 0.3528695 0.3972551 0.3355537 0.4337266 0.3428137 0.6090658 #> [491] 0.4743335 0.4102529 0.3275955 0.4749335 0.3569206 0.3227600 0.4331892 #> [498] 0.4553031 0.5134492 0.2828911 #>  #> $ci #>      2.5%     97.5%  #> 0.1801713 0.5132330  #>"},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_subsampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertainty of KL divergence estimate using Politis/Romano's subsampling bootstrap. — kld_ci_subsampling","title":"Uncertainty of KL divergence estimate using Politis/Romano's subsampling bootstrap. — kld_ci_subsampling","text":"function computes confidence interval KL divergence based subsampling bootstrap introduced Politis Romano. See Details theoretical properties method.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_subsampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertainty of KL divergence estimate using Politis/Romano's subsampling bootstrap. — kld_ci_subsampling","text":"","code":"kld_ci_subsampling(   X,   Y = NULL,   q = NULL,   estimator = kld_est_nn,   B = 500L,   alpha = 0.05,   subsample.size = function(x) x^(2/3),   convergence.rate = sqrt,   method = c(\"quantile\", \"se\"),   n.cores = 1L,   ... )"},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_subsampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertainty of KL divergence estimate using Politis/Romano's subsampling bootstrap. — kld_ci_subsampling","text":"X, Y n--d m--d data frames matrices (multivariate samples), numeric/character vectors (univariate samples, .e. d = 1), representing n samples true distribution \\(P\\) m samples approximate distribution \\(Q\\) d dimensions. Y can left blank q specified (see ). q density function approximate distribution \\(Q\\). Either Y q must specified. distributions continuous discrete, q can directly specified probability density/mass function. However, mixed continuous/discrete distributions, q must given decomposed form, \\(q(y_c,y_d)=q_{c|d}(y_c|y_d)q_d(y_d)\\), specified named list field cond conditional density \\(q_{c|d}(y_c|y_d)\\) (function expects two arguments y_c y_d) disc discrete marginal density \\(q_d(y_d)\\) (function expects one argument y_d). decomposition available, may preferable instead simulate large sample \\(Q\\) use two-sample syntax. estimator Kullback-Leibler divergence estimation method; function expecting two inputs (X Y q, depending arguments provided). Defaults kld_est_nn. B Number bootstrap replicates (default: 500), larger, accurate, also computationally expensive. alpha Error level, defaults 0.05. subsample.size function specifying size subsamples, defaults \\(f(x) = x^{2/3}\\). convergence.rate function computing convergence rate estimator function sample sizes. Defaults \\(f(x) = x^{1/2}\\). method Either \"quantile\" (default), also known reverse percentile method, \"se\" normal approximation KL divergence estimator using standard error subsamples. n.cores Number cores use parallel computing (defaults 1, means parallel computing used). use option, parallel package must installed OS must UNIX type (.e., Windows). Otherwise, n.cores reset 1, message. ... Arguments passed estimator, .e. via call estimator(X, Y = Y, ...) estimator(X, q = q, ...).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_subsampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncertainty of KL divergence estimate using Politis/Romano's subsampling bootstrap. — kld_ci_subsampling","text":"list following fields: \"est\" (estimated KL divergence), \"boot\" (length B numeric vector KL divergence estimates bootstrap subsamples), \"ci\" (length 2 vector containing lower upper limits estimated confidence interval).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_subsampling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Uncertainty of KL divergence estimate using Politis/Romano's subsampling bootstrap. — kld_ci_subsampling","text":"general terms, tetting \\(b_n\\) subsample size sample size \\(n\\), \\(\\tau_n\\) convergence rate estimator, confidence interval calculated subsampling asymptotic coverage \\(1 - \\alpha\\) long \\(b_n/n\\rightarrow 0\\), \\(b_n\\rightarrow\\infty\\) \\(\\frac{\\tau_{b_n}}{\\tau_n}\\rightarrow 0\\). convergence rate nearest-neighbour based KL divergence estimator \\(\\tau_n = \\sqrt{n}\\), condition subsample size reduces \\(b_n/n\\rightarrow 0\\) \\(b_n\\rightarrow\\infty\\). default, \\(b_n = n^{2/3}\\). two-sample problem, \\(n\\) \\(b_n\\) replaced effective sample sizes \\(n_\\text{eff} = \\min(n,m)\\) \\(b_{n,\\text{eff}} = \\min(b_n,b_m)\\). Reference: Politis Romano, \"Large sample confidence regions based subsamples minimal assumptions\", Annals Statistics, Vol. 22, . 4 (1994).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_ci_subsampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertainty of KL divergence estimate using Politis/Romano's subsampling bootstrap. — kld_ci_subsampling","text":"","code":"# 1D Gaussian (one- and two-sample problems) set.seed(0) X <- rnorm(100) Y <- rnorm(100, mean = 1, sd = 2) q <- function(x) dnorm(x, mean =1, sd = 2) kld_gaussian(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2) #> [1] 0.4431472 kld_est_nn(X, Y = Y) #> [1] 0.2169136 kld_est_nn(X, q = q) #> [1] 0.6374628 kld_ci_subsampling(X, Y)$ci #>       2.5%      97.5%  #> -0.2799538  0.5913424  kld_ci_subsampling(X, q = q)$ci #>      2.5%     97.5%  #> 0.2870222 0.9201281"},{"path":"https://niklhart.github.io/kldest/reference/kld_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Analytical KL divergence for two discrete distributions — kld_discrete","title":"Analytical KL divergence for two discrete distributions — kld_discrete","text":"Analytical KL divergence two discrete distributions","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analytical KL divergence for two discrete distributions — kld_discrete","text":"","code":"kld_discrete(P, Q)"},{"path":"https://niklhart.github.io/kldest/reference/kld_discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analytical KL divergence for two discrete distributions — kld_discrete","text":"P, Q Numerical arrays dimensions, representing discrete probability distributions","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analytical KL divergence for two discrete distributions — kld_discrete","text":"scalar (Kullback-Leibler divergence)","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analytical KL divergence for two discrete distributions — kld_discrete","text":"","code":"# 1-D example P <- 1:4/10 Q <- rep(0.25,4) kld_discrete(P,Q) #> [1] 0.1064401  # The above example in 2-D P <- matrix(1:4/10,nrow=2) Q <- matrix(0.25,nrow=2,ncol=2) kld_discrete(P,Q) #> [1] 0.1064401"},{"path":"https://niklhart.github.io/kldest/reference/kld_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Kullback-Leibler divergence estimator for discrete, continuous or mixed data. — kld_est","title":"Kullback-Leibler divergence estimator for discrete, continuous or mixed data. — kld_est","text":"two mixed continuous/discrete distributions densities \\(p\\) \\(q\\), denoting \\(x = (x_\\text{c},x_\\text{d})\\), Kullback-Leibler divergence \\(D_{KL}(p||q)\\) given $$D_{KL}(p||q) = \\sum_{x_d} \\int p(x_c,x_d) \\log\\left(\\frac{p(x_c,x_d)}{q(x_c,x_d)}\\right)dx_c.$$ Conditioning discrete variables \\(x_d\\), can re-written $$D_{KL}(p||q) = \\sum_{x_d} p(x_d) D_{KL}\\big(p(\\cdot|x_d)||q(\\cdot|x_d)\\big) + D_{KL}\\big(p_{x_d}||q_{x_d}\\big).$$ , terms $$D_{KL}\\big(p(\\cdot|x_d)||q(\\cdot|x_d)\\big)$$ approximated via nearest neighbour- kernel-based density estimates datasets X Y stratified discrete variables, $$D_{KL}\\big(p_{x_d}||q_{x_d}\\big)$$ approximated using relative frequencies.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kullback-Leibler divergence estimator for discrete, continuous or mixed data. — kld_est","text":"","code":"kld_est(   X,   Y = NULL,   q = NULL,   estimator.continuous = kld_est_nn,   estimator.discrete = kld_est_discrete,   vartype = NULL )"},{"path":"https://niklhart.github.io/kldest/reference/kld_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kullback-Leibler divergence estimator for discrete, continuous or mixed data. — kld_est","text":"X, Y n--d m--d data frames matrices (multivariate samples), numeric/character vectors (univariate samples, .e. d = 1), representing n samples true distribution \\(P\\) m samples approximate distribution \\(Q\\) d dimensions. Y can left blank q specified (see ). q density function approximate distribution \\(Q\\). Either Y q must specified. distributions continuous discrete, q can directly specified probability density/mass function. However, mixed continuous/discrete distributions, q must given decomposed form, \\(q(y_c,y_d)=q_{c|d}(y_c|y_d)q_d(y_d)\\), specified named list field cond conditional density \\(q_{c|d}(y_c|y_d)\\) (function expects two arguments y_c y_d) disc discrete marginal density \\(q_d(y_d)\\) (function expects one argument y_d). decomposition available, may preferable instead simulate large sample \\(Q\\) use two-sample syntax. estimator.continuous, estimator.discrete KL divergence estimators continuous discrete data, respectively. functions two arguments X Y X q, depending whether two-sample one-sample problem considered. Defaults kld_est_nn kld_est_discrete, respectively. vartype length d character vector, vartype[] = \"c\" meaning -th variable continuous, vartype[] = \"d\" meaning discrete. unspecified, vartype \"c\" numeric columns \"d\" character factor columns. default mostly work, except levels discrete variables encoded using numbers (e.g., 0 females 1 males) count data.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kullback-Leibler divergence estimator for discrete, continuous or mixed data. — kld_est","text":"scalar, estimated Kullback-Leibler divergence \\(\\hat D_{KL}(P||Q)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kullback-Leibler divergence estimator for discrete, continuous or mixed data. — kld_est","text":"","code":"# 2D example, two samples set.seed(0) X <- data.frame(cont  = rnorm(10),                 discr = c(rep('a',4),rep('b',6))) Y <- data.frame(cont  = c(rnorm(5), rnorm(5, sd = 2)),                 discr = c(rep('a',5),rep('b',5))) kld_est(X, Y) #> [1] 0.5099841  # 2D example, one sample set.seed(0) X <- data.frame(cont  = rnorm(10),                 discr = c(rep(0,4),rep(1,6))) q <- list(cond = function(xc,xd) dnorm(xc, mean = xd, sd = 1),           disc = function(xd) dbinom(xd, size = 1, prob = 0.5)) kld_est(X, q = q, vartype = c(\"c\",\"d\")) #> [1] 0.8126271"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_brnn.html","id":null,"dir":"Reference","previous_headings":"","what":"Bias-reduced generalized k-nearest-neighbour KL divergence estimation — kld_est_brnn","title":"Bias-reduced generalized k-nearest-neighbour KL divergence estimation — kld_est_brnn","text":"bias-reduced generalized k-NN based KL divergence estimator Wang et al. (2009) specified Eq.(29).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_brnn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bias-reduced generalized k-nearest-neighbour KL divergence estimation — kld_est_brnn","text":"","code":"kld_est_brnn(X, Y, max.k = 100, warn.max.k = TRUE, eps = 0)"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_brnn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bias-reduced generalized k-nearest-neighbour KL divergence estimation — kld_est_brnn","text":"X, Y n--d m--d matrices, representing n samples true distribution \\(P\\) m samples approximate distribution \\(Q\\), d dimensions. Vector input treated column matrix. Y can left blank q specified (see ). max.k Maximum numbers nearest neighbours compute (default: 100). larger max.k may yield accurate KL-D estimate (see warn.max.k), always increase computational cost. warn.max.k TRUE (default), warns max.k max.k neighbours within neighbourhood \\(\\delta\\) data point(s). case, first max.k neighbours counted. consequence, max.k may required increased. eps Error bound nearest neighbour search. value eps = 0 (default) implies exact nearest neighbour search, eps > 0 approximate nearest neighbours sought, may somewhat faster high-dimensional problems.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_brnn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bias-reduced generalized k-nearest-neighbour KL divergence estimation — kld_est_brnn","text":"scalar, estimated Kullback-Leibler divergence \\(\\hat D_{KL}(P||Q)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_brnn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bias-reduced generalized k-nearest-neighbour KL divergence estimation — kld_est_brnn","text":"Finite sample bias reduction achieved adaptive choice number nearest neighbours. Fixing number nearest neighbours upfront, done kld_est_nn(), may result different distances \\(\\rho^l_i,\\nu^k_i\\) datapoint \\(x_i\\) \\(l\\)-th nearest neighbours \\(X\\) \\(k\\)-th nearest neighbours \\(Y\\), respectively, may lead unequal biases NN density estimation, especially high-dimensional setting. overcome issue, number neighbours \\(l,k\\) chosen way render \\(\\rho^l_i,\\nu^k_i\\) comparable, taking largest possible number neighbours \\(l_i,k_i\\) smaller \\(\\delta_i:=\\max(\\rho^1_i,\\nu^1_i)\\). Since bias reduction explicitly uses samples X Y, one-sample estimation possible using method. Reference: Wang, Kulkarni Verdú, \"Divergence Estimation Multidimensional Densities Via k-Nearest-Neighbor Distances\", IEEE Transactions Information Theory, Vol. 55, . 5 (2009). DOI: https://doi.org/10.1109/TIT.2009.2016060","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_brnn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bias-reduced generalized k-nearest-neighbour KL divergence estimation — kld_est_brnn","text":"","code":"# KL-D between one or two samples from 1-D Gaussians: set.seed(0) X <- rnorm(100) Y <- rnorm(100, mean = 1, sd = 2) q <- function(x) dnorm(x, mean = 1, sd =2) kld_gaussian(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2) #> [1] 0.4431472 kld_est_nn(X, Y) #> [1] 0.2169136 kld_est_nn(X, q = q) #> [1] 0.6374628 kld_est_nn(X, Y, k = 5) #> [1] 0.491102 kld_est_nn(X, q = q, k = 5) #> [1] 0.6904697 kld_est_brnn(X, Y) #> [1] 0.1865685   # KL-D between two samples from 2-D Gaussians: set.seed(0) X1 <- rnorm(100) X2 <- rnorm(100) Y1 <- rnorm(100) Y2 <- Y1 + rnorm(100) X <- cbind(X1,X2) Y <- cbind(Y1,Y2) kld_gaussian(mu1 = rep(0,2), sigma1 = diag(2),              mu2 = rep(0,2), sigma2 = matrix(c(1,1,1,2),nrow=2)) #> [1] 0.5 kld_est_nn(X, Y) #> [1] 0.1841371 kld_est_nn(X, Y, k = 5) #> [1] 0.1788047 kld_est_brnn(X, Y) #> [1] 0.1854864"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Plug-in KL divergence estimator for samples from discrete distributions — kld_est_discrete","title":"Plug-in KL divergence estimator for samples from discrete distributions — kld_est_discrete","text":"Plug-KL divergence estimator samples discrete distributions","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plug-in KL divergence estimator for samples from discrete distributions — kld_est_discrete","text":"","code":"kld_est_discrete(X, Y = NULL, q = NULL)"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plug-in KL divergence estimator for samples from discrete distributions — kld_est_discrete","text":"X, Y n--d m--d matrices data frames, representing n samples true discrete distribution \\(P\\) m samples approximate discrete distribution \\(Q\\), d dimensions. Vector input treated column matrix. Argument Y can omitted argument q given (see ). q probability mass function approximate distribution \\(Q\\). Currently, one-sample problem implemented d=1.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plug-in KL divergence estimator for samples from discrete distributions — kld_est_discrete","text":"scalar, estimated Kullback-Leibler divergence \\(\\hat D_{KL}(P||Q)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plug-in KL divergence estimator for samples from discrete distributions — kld_est_discrete","text":"","code":"# 1D example, two samples X <- c(rep('M',5),rep('F',5)) Y <- c(rep('M',6),rep('F',4)) kld_est_discrete(X, Y) #> [1] 0.020411  # 1D example, one sample X <- c(rep(0,4),rep(1,6)) q <- function(x) dbinom(x, size = 1, prob = 0.5) kld_est_discrete(X, q = q) #> [1] 0.02013551"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel density-based Kullback-Leibler divergence estimation in any dimension — kld_est_kde","title":"Kernel density-based Kullback-Leibler divergence estimation in any dimension — kld_est_kde","text":"Disclaimer: function use binning /fast Fourier transform hence, extremely slow even moderate datasets. reason, exported currently.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel density-based Kullback-Leibler divergence estimation in any dimension — kld_est_kde","text":"","code":"kld_est_kde(X, Y, hX = NULL, hY = NULL, rule = c(\"Silverman\", \"Scott\"))"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel density-based Kullback-Leibler divergence estimation in any dimension — kld_est_kde","text":"X, Y n--d m--d matrices, representing n samples true distribution \\(P\\) m samples approximate distribution \\(Q\\), d dimensions. Vector input treated column matrix. hX, hY Positive scalars length d vectors, representing bandwidth parameters (possibly different component) density estimates \\(P\\) \\(Q\\), respectively. unspecified, heurestic specified via rule argument used. rule heuristic computing arguments hX /hY. default \"silverman\" Silverman's rule $$h_i = \\sigma_i\\left(\\frac{4}{(2+d)n}\\right)^{1/(d+4)}.$$ alternative, Scott's rule \"scott\" can used, $$h_i = \\frac{\\sigma_i}{n^{1/(d+4)}}.$$","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel density-based Kullback-Leibler divergence estimation in any dimension — kld_est_kde","text":"scalar, estimated Kullback-Leibler divergence \\(\\hat D_{KL}(P||Q)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel density-based Kullback-Leibler divergence estimation in any dimension — kld_est_kde","text":"estimation method approximates densities unknown distributions \\(P\\) \\(Q\\) kernel density estimates, using sample size- dimension-dependent bandwidth parameter Gaussian kernel. works number dimensions slow.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel density-based Kullback-Leibler divergence estimation in any dimension — kld_est_kde","text":"","code":"# KL-D between two samples from 1-D Gaussians: set.seed(0) X <- rnorm(100) Y <- rnorm(100, mean = 1, sd = 2) kld_gaussian(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2) #> [1] 0.4431472 kld_est_kde1(X, Y) #> [1] 0.3777243 kld_est_nn(X, Y) #> [1] 0.2169136 kld_est_brnn(X, Y) #> [1] 0.1865685  # KL-D between two samples from 2-D Gaussians: set.seed(0) X1 <- rnorm(100) X2 <- rnorm(100) Y1 <- rnorm(100) Y2 <- Y1 + rnorm(100) X <- cbind(X1,X2) Y <- cbind(Y1,Y2) kld_gaussian(mu1 = rep(0,2), sigma1 = diag(2),              mu2 = rep(0,2), sigma2 = matrix(c(1,1,1,2),nrow=2)) #> [1] 0.5 kld_est_kde2(X, Y) #> [1] 0.07137239 kld_est_nn(X, Y) #> [1] 0.1841371 kld_est_brnn(X, Y) #> [1] 0.1854864"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde1.html","id":null,"dir":"Reference","previous_headings":"","what":"1-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde1","title":"1-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde1","text":"estimation method approximates densities unknown distributions \\(P\\) \\(Q\\) kernel density estimate using function 'density' package 'stats'. two-sample, one-sample problem implemented.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde1","text":"","code":"kld_est_kde1(X, Y, MC = FALSE, ...)"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde1","text":"X, Y Numeric vectors single-column matrices, representing samples true distribution \\(P\\) approximate distribution \\(Q\\), respectively. MC boolean: use Monte Carlo approximation instead numerical integration via trapezoidal rule (default: FALSE)? ... parameters passed stats::density (e.g., argument bw)","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde1","text":"scalar, estimated Kullback-Leibler divergence \\(\\hat D_{KL}(P||Q)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde1","text":"","code":"# KL-D between two samples from 1D Gaussians: set.seed(0) X <- rnorm(100) Y <- rnorm(100, mean = 1, sd = 2) kld_gaussian(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2) #> [1] 0.4431472 kld_est_kde1(X,Y) #> [1] 0.3777243 kld_est_kde1(X,Y, MC = TRUE) #> [1] 0.4348132"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde2.html","id":null,"dir":"Reference","previous_headings":"","what":"2-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde2","title":"2-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde2","text":"estimation method approximates densities unknown bivariate distributions \\(P\\) \\(Q\\) kernel density estimates using function 'bkde' package 'KernSmooth'. 'KernSmooth' installed, message issued (much) slower function 'kld_est_kde' used instead.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"2-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde2","text":"","code":"kld_est_kde2(   X,   Y,   MC = FALSE,   hX = NULL,   hY = NULL,   rule = c(\"Silverman\", \"Scott\"),   eps = 1e-05 )"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"2-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde2","text":"X, Y n--2 m--2 matrices, representing n samples bivariate true distribution \\(P\\) m samples approximate distribution \\(Q\\), respectively. MC boolean: use Monte Carlo approximation instead numerical integration via trapezoidal rule (default: FALSE)? Currently, option implemented, .e. value TRUE results error. hX, hY Bandwidths kernel density estimates \\(P\\) \\(Q\\), respectively. default NULL means determined argument rule. rule heuristic derive parameters hX hY, default \"Silverman\", means $$h_i = \\sigma_i\\left(\\frac{4}{(2+d)n}\\right)^{1/(d+4)}.$$ eps nonnegative scalar; eps > 0, \\(Q\\) estimated mixture kernel density estimate uniform distribution computational grid. weight uniform component eps times maximum density estimate \\(Q\\). increases robustness estimator expense additional bias. Defaults eps = 1e-5.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"2-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde2","text":"scalar, estimated Kullback-Leibler divergence \\(\\hat D_{KL}(P||Q)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_kde2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"2-D kernel density-based estimation of Kullback-Leibler divergence — kld_est_kde2","text":"","code":"# KL-D between two samples from 2-D Gaussians: set.seed(0) X1 <- rnorm(1000) X2 <- rnorm(1000) Y1 <- rnorm(1000) Y2 <- Y1 + rnorm(1000) X <- cbind(X1,X2) Y <- cbind(Y1,Y2) kld_gaussian(mu1 = rep(0,2), sigma1 = diag(2),              mu2 = rep(0,2), sigma2 = matrix(c(1,1,1,2),nrow=2)) #> [1] 0.5 kld_est_kde2(X,Y) #> [1] 0.3639046 # kld_est_kde2(X,Y, MC = TRUE)"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"k-nearest neighbour KL divergence estimator — kld_est_nn","title":"k-nearest neighbour KL divergence estimator — kld_est_nn","text":"function estimates Kullback-Leibler divergence \\(D_{KL}(P||Q)\\) two continuous distributions \\(P\\) \\(Q\\) using nearest-neighbour (NN) density estimation Monte Carlo approximation \\(D_{KL}(P||Q)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"k-nearest neighbour KL divergence estimator — kld_est_nn","text":"","code":"kld_est_nn(X, Y = NULL, q = NULL, k = 1L, eps = 0, log.q = FALSE)"},{"path":"https://niklhart.github.io/kldest/reference/kld_est_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"k-nearest neighbour KL divergence estimator — kld_est_nn","text":"X, Y n--d m--d matrices, representing n samples true distribution \\(P\\) m samples approximate distribution \\(Q\\), d dimensions. Vector input treated column matrix. Y can left blank q specified (see ). q density function approximate distribution \\(Q\\). Either Y q must specified. k number nearest neighbours consider NN density estimation. Larger values k generally increase bias, decrease variance estimator. Defaults k = 1. eps Error bound nearest neighbour search. value eps = 0 (default) implies exact nearest neighbour search, eps > 0 approximate nearest neighbours sought, may somewhat faster high-dimensional problems. log.q TRUE, function q log-density rather density approximate distribution \\(Q\\) (default: log.q = FALSE).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"k-nearest neighbour KL divergence estimator — kld_est_nn","text":"scalar, estimated Kullback-Leibler divergence \\(\\hat D_{KL}(P||Q)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_nn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"k-nearest neighbour KL divergence estimator — kld_est_nn","text":"Input estimation sample X \\(P\\) either density function q \\(Q\\) (one-sample problem) sample Y \\(Q\\) (two-sample problem). two-sample problem, estimator Eq.(5) Wang et al. (2009). one-sample problem, asymptotic bias (expectation Gamma distribution) substracted, see Pérez-Cruz (2008), Eq.(18). References: Wang, Kulkarni Verdú, \"Divergence Estimation Multidimensional Densities Via k-Nearest-Neighbor Distances\", IEEE Transactions Information Theory, Vol. 55, . 5 (2009). Pérez-Cruz, \"Kullback-Leibler Divergence Estimation Continuous Distributions\", IEEE International Symposium Information Theory (2008).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_est_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"k-nearest neighbour KL divergence estimator — kld_est_nn","text":"","code":"# KL-D between one or two samples from 1-D Gaussians: set.seed(0) X <- rnorm(100) Y <- rnorm(100, mean = 1, sd = 2) q <- function(x) dnorm(x, mean = 1, sd =2) kld_gaussian(mu1 = 0, sigma1 = 1, mu2 = 1, sigma2 = 2^2) #> [1] 0.4431472 kld_est_nn(X, Y) #> [1] 0.2169136 kld_est_nn(X, q = q) #> [1] 0.6374628 kld_est_nn(X, Y, k = 5) #> [1] 0.491102 kld_est_nn(X, q = q, k = 5) #> [1] 0.6904697 kld_est_brnn(X, Y) #> [1] 0.1865685   # KL-D between two samples from 2-D Gaussians: set.seed(0) X1 <- rnorm(100) X2 <- rnorm(100) Y1 <- rnorm(100) Y2 <- Y1 + rnorm(100) X <- cbind(X1,X2) Y <- cbind(Y1,Y2) kld_gaussian(mu1 = rep(0,2), sigma1 = diag(2),              mu2 = rep(0,2), sigma2 = matrix(c(1,1,1,2),nrow=2)) #> [1] 0.5 kld_est_nn(X, Y) #> [1] 0.1841371 kld_est_nn(X, Y, k = 5) #> [1] 0.1788047 kld_est_brnn(X, Y) #> [1] 0.1854864"},{"path":"https://niklhart.github.io/kldest/reference/kld_exponential.html","id":null,"dir":"Reference","previous_headings":"","what":"Analytical KL divergence for two univariate exponential distributions — kld_exponential","title":"Analytical KL divergence for two univariate exponential distributions — kld_exponential","text":"function computes \\(D_{KL}(p||q)\\), \\(p\\sim \\text{Exp}(\\lambda_1)\\) \\(q\\sim \\text{Exp}(\\lambda_2)\\), rate parametrization.","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_exponential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analytical KL divergence for two univariate exponential distributions — kld_exponential","text":"","code":"kld_exponential(lambda1, lambda2)"},{"path":"https://niklhart.github.io/kldest/reference/kld_exponential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analytical KL divergence for two univariate exponential distributions — kld_exponential","text":"lambda1 scalar (rate parameter true exponential distribution) lambda2 scalar (rate parameter approximate exponential distribution)","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_exponential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analytical KL divergence for two univariate exponential distributions — kld_exponential","text":"scalar (Kullback-Leibler divergence)","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_exponential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analytical KL divergence for two univariate exponential distributions — kld_exponential","text":"","code":"kld_exponential(lambda1 = 1, lambda2 = 2) #> [1] 0.3068528"},{"path":"https://niklhart.github.io/kldest/reference/kld_gaussian.html","id":null,"dir":"Reference","previous_headings":"","what":"Analytical KL divergence for two uni- or multivariate Gaussian distributions — kld_gaussian","title":"Analytical KL divergence for two uni- or multivariate Gaussian distributions — kld_gaussian","text":"function computes \\(D_{KL}(p||q)\\), \\(p\\sim \\mathcal{N}(\\mu_1,\\Sigma_1)\\) \\(q\\sim \\mathcal{N}(\\mu_2,\\Sigma_2)\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_gaussian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analytical KL divergence for two uni- or multivariate Gaussian distributions — kld_gaussian","text":"","code":"kld_gaussian(mu1, sigma1, mu2, sigma2)"},{"path":"https://niklhart.github.io/kldest/reference/kld_gaussian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analytical KL divergence for two uni- or multivariate Gaussian distributions — kld_gaussian","text":"mu1 numeric vector (mean true Gaussian) sigma1 s.p.d. matrix (Covariance matrix true Gaussian) mu2 numeric vector (mean approximate Gaussian) sigma2 s.p.d. matrix  (Covariance matrix approximate Gaussian)","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_gaussian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analytical KL divergence for two uni- or multivariate Gaussian distributions — kld_gaussian","text":"scalar (Kullback-Leibler divergence)","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_gaussian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analytical KL divergence for two uni- or multivariate Gaussian distributions — kld_gaussian","text":"","code":"kld_gaussian(mu1 = 1, sigma1 = 1, mu2 = 1, sigma2 = 2^2) #> [1] 0.3181472 kld_gaussian(mu1 = rep(0,2), sigma1 = diag(2),                 mu2 = rep(1,2), sigma2 = matrix(c(1,0.5,0.5,1), nrow = 2)) #> [1] 0.856159"},{"path":"https://niklhart.github.io/kldest/reference/kld_uniform.html","id":null,"dir":"Reference","previous_headings":"","what":"Analytical KL divergence for two uniform distributions — kld_uniform","title":"Analytical KL divergence for two uniform distributions — kld_uniform","text":"function computes \\(D_{KL}(p||q)\\), \\(p\\sim \\text{U}(a_1,b_1)\\) \\(q\\sim \\text{U}(a_2,b_2)\\), \\(a_2<a_1<b_1<b_2\\).","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_uniform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analytical KL divergence for two uniform distributions — kld_uniform","text":"","code":"kld_uniform(a1, b1, a2, b2)"},{"path":"https://niklhart.github.io/kldest/reference/kld_uniform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analytical KL divergence for two uniform distributions — kld_uniform","text":"a1, b1 Range true uniform distribution a2, b2 Range approximate uniform distribution","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_uniform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analytical KL divergence for two uniform distributions — kld_uniform","text":"scalar (Kullback-Leibler divergence)","code":""},{"path":"https://niklhart.github.io/kldest/reference/kld_uniform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analytical KL divergence for two uniform distributions — kld_uniform","text":"","code":"kld_uniform(a1 = 0, b1 = 1, a2 = 0, b2 = 2) #> [1] 0.6931472"},{"path":"https://niklhart.github.io/kldest/reference/kldest-package.html","id":null,"dir":"Reference","previous_headings":"","what":"kldest: Sample-based estimation of Kullback-Leibler divergence — kldest-package","title":"kldest: Sample-based estimation of Kullback-Leibler divergence — kldest-package","text":"collection estimation algorithms Kullback-Leibler divergence two probability distributions, based one two samples, including uncertainty quantification. Distributions can uni- multivariate continous, discrete mixed.","code":""},{"path":[]},{"path":"https://niklhart.github.io/kldest/reference/kldest-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"kldest: Sample-based estimation of Kullback-Leibler divergence — kldest-package","text":"Maintainer: Niklas Hartung niklas.hartung@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://niklhart.github.io/kldest/reference/mvdnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability density function of multivariate Gaussian distribution — mvdnorm","title":"Probability density function of multivariate Gaussian distribution — mvdnorm","text":"Probability density function multivariate Gaussian distribution","code":""},{"path":"https://niklhart.github.io/kldest/reference/mvdnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability density function of multivariate Gaussian distribution — mvdnorm","text":"","code":"mvdnorm(x, mu, Sigma)"},{"path":"https://niklhart.github.io/kldest/reference/mvdnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability density function of multivariate Gaussian distribution — mvdnorm","text":"x vector length d Gaussian density evaluated. mu vector length d, mean Gaussian distribution. Sigma d--d matrix, covariance matrix Gaussian distribution.","code":""},{"path":"https://niklhart.github.io/kldest/reference/mvdnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability density function of multivariate Gaussian distribution — mvdnorm","text":"probability density \\(N(\\mu,\\Sigma)\\) evaluated x.","code":""},{"path":"https://niklhart.github.io/kldest/reference/mvdnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability density function of multivariate Gaussian distribution — mvdnorm","text":"","code":"# 1D example mvdnorm(x = 2, mu = 1, Sigma = 2) #> [1] 0.2196956 dnorm(x = 2, mean = 1, sd = sqrt(2)) #> [1] 0.2196956 # Independent 2D example mvdnorm(x = c(2,2), mu = c(1,1), Sigma = diag(1:2)) #> [1] 0.05315991 prod(dnorm(x = c(2,2), mean = c(1,1), sd = sqrt(1:2))) #> [1] 0.05315991 # Correlated 2D example mvdnorm(x = c(2,2), mu = c(1,1), Sigma = matrix(c(2,1,1,2),nrow=2)) #> [1] 0.06584074"},{"path":"https://niklhart.github.io/kldest/reference/to_uniform_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform samples to uniform scale — to_uniform_scale","title":"Transform samples to uniform scale — to_uniform_scale","text":"Since Kullback-Leibler divergence scale-invariant, sample-based approximations can computed conveniently chosen scale. helper functions transforms variable way marginal distributions joint dataset \\((X,Y)\\) uniform. way, scales different variables rendered comparable, idea better performance neighbour-based methods situation.","code":""},{"path":"https://niklhart.github.io/kldest/reference/to_uniform_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform samples to uniform scale — to_uniform_scale","text":"","code":"to_uniform_scale(X, Y)"},{"path":"https://niklhart.github.io/kldest/reference/to_uniform_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform samples to uniform scale — to_uniform_scale","text":"X, Y n--d m--d matrices, representing n samples true distribution \\(P\\) m samples approximate distribution \\(Q\\), d dimensions. Vector input treated column matrix. Y can left blank q specified (see ).","code":""},{"path":"https://niklhart.github.io/kldest/reference/to_uniform_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform samples to uniform scale — to_uniform_scale","text":"list fields X Y, containing transformed samples.","code":""},{"path":"https://niklhart.github.io/kldest/reference/to_uniform_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform samples to uniform scale — to_uniform_scale","text":"","code":"# 2D example n <- 10L X <- cbind(rnorm(n, mean = 0, sd = 3),            rnorm(n, mean = 1, sd = 2)) Y <- cbind(rnorm(n, mean = 1, sd = 2),            rnorm(n, mean = 0, sd = 2)) to_uniform_scale(X, Y) #> $X #>       [,1] [,2] #>  [1,] 0.25 0.70 #>  [2,] 0.10 0.60 #>  [3,] 0.70 0.85 #>  [4,] 0.60 0.20 #>  [5,] 0.90 0.50 #>  [6,] 0.05 0.75 #>  [7,] 0.30 0.95 #>  [8,] 1.00 0.80 #>  [9,] 0.40 0.65 #> [10,] 0.85 0.90 #>  #> $Y #>       [,1] [,2] #>  [1,] 0.55 0.30 #>  [2,] 0.20 0.35 #>  [3,] 0.50 0.10 #>  [4,] 0.45 0.40 #>  [5,] 0.65 0.55 #>  [6,] 0.35 0.15 #>  [7,] 0.80 1.00 #>  [8,] 0.95 0.25 #>  [9,] 0.15 0.05 #> [10,] 0.75 0.45 #>"},{"path":"https://niklhart.github.io/kldest/reference/tr.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix trace operator — tr","title":"Matrix trace operator — tr","text":"Matrix trace operator","code":""},{"path":"https://niklhart.github.io/kldest/reference/tr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix trace operator — tr","text":"","code":"tr(M)"},{"path":"https://niklhart.github.io/kldest/reference/tr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix trace operator — tr","text":"M square matrix","code":""},{"path":"https://niklhart.github.io/kldest/reference/tr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matrix trace operator — tr","text":"matrix trace (scalar)","code":""},{"path":"https://niklhart.github.io/kldest/reference/trapz.html","id":null,"dir":"Reference","previous_headings":"","what":"Trapezoidal integration in d dimensions — trapz","title":"Trapezoidal integration in d dimensions — trapz","text":"Trapezoidal integration d dimensions","code":""},{"path":"https://niklhart.github.io/kldest/reference/trapz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trapezoidal integration in d dimensions — trapz","text":"","code":"trapz(h, fx)"},{"path":"https://niklhart.github.io/kldest/reference/trapz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trapezoidal integration in d dimensions — trapz","text":"h length d numeric vector grid widths. fx d-dimensional array (vector, d=1).","code":""},{"path":"https://niklhart.github.io/kldest/reference/trapz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trapezoidal integration in d dimensions — trapz","text":"trapezoidal approximation integral.","code":""},{"path":"https://niklhart.github.io/kldest/reference/trapz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trapezoidal integration in d dimensions — trapz","text":"","code":"# 1D example trapz(h = 1, fx = 1:10) #> [1] 49.5 # 2D example trapz(h = c(1,1), fx = matrix(1:10, nrow = 2)) #> [1] 22"}]
